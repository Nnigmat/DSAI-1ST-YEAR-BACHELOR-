import java.io.*;
import java.util.Scanner;

/**
 * Class Item need for us for implementation Greedy algorithm
 * to solve this knapsack problem.
 *
 * Each item will have time, cost and coefficient, where coefficient
 * equal time divided cost
 */
class Item {
    int time = 0, cost = 0;
    double coefficient = 0;
}

public class WhiteRabbit {

    /**
     * We have two arrays - time and cost
     *
     * Also we have one integer called budget - it's our maximum number
     * of money that we may spend
     */
    public static int[] time;
    public static int[] cost;
    public static int budget;

    /**
     * This method parse data from file and save it into our variables
     * and arrays
     *
     * @throws FileNotFoundException
     */
    public static void parser() throws FileNotFoundException {
        Scanner sc = new Scanner(new FileReader("input.txt"));

        /**
         * All elements that we have read
         */
        String[] tempStr = sc.nextLine().split(" ");

        /**
         * We know that in our first line we have n elements that
         * contains of two fields. By using this information we
         * may say that each array will equal half of number of
         * elements
         */
        time = new int[tempStr.length / 2];
        cost = new int[tempStr.length / 2];

        /**
         * Add our data to each array
         */
        for (int i = 0; i < tempStr.length / 2; i++) {
            time[i] = Integer.valueOf(tempStr[i*2]);
            cost[i] = Integer.valueOf(tempStr[i*2 + 1]);
        }

        /**
         * Read our budget
         */
        budget = sc.nextInt();
    }

    /**
     * BruteForce
     *
     * In this method we just check all possible variants that
     * equal 2^n
     * @return
     */
    public static int BruteForce() {
        /**
         * Create variable max_time to save into it our maximum
         * possible number of time and make it equal the least
         * possible integer in "int"
         */
        int max_time = Integer.MIN_VALUE;

        /**
         * We go from 1 to 2^n number and trying to convert
         * this decimal number to binary number. If current
         * number equal 1 add element with this number into
         * the knapsack, if 0 - do nothing
         */
        for (int i = 1; i < Math.pow(2, time.length); i++) {

            /**
             * Pointer - which number now
             *      Ex: 8 -> 1000
             *      First    ---^
             *      Second   --^-
             *      And so on
             *
             * tempTotalTime and tempSum is time that we get in this current variant
             */
            int pointer = 0, tempTotalTime = 0, tempSum = 0, j = i;

            /**
             * If j is equal to 0 end program
             */
            while (j != 0) {

                /**
                 * If derivative is 1 make some calculation
                 */
                if (j % 2 == 1) {
                    tempSum += cost[pointer];
                    tempTotalTime += time[pointer];
                }

                /**
                 * Incrementation of pointer
                 */
                pointer++;

                /**
                 * Go to the next number
                 */
                j /= 2;

            }

            /**
             * Trying to find best case that doesn't interrupt to our condition
             */
            if (budget >= tempSum && tempTotalTime > max_time) {
                max_time = tempTotalTime;
            }
        }

        /**
         * May happen situation when all elements that we got are bigger than
         * our budget and if we didn't add this - max_time == Integer.MIN_VALUE
         * we will take from program very small number that we don't need
         */
        if (max_time == Integer.MIN_VALUE) {
            return 0;
        } else {
            return max_time;
        }
    }

    /**
     * Main idea of this greedy algorithm:
     *      Sort all elements by their coefficient which equal time / cost
     *      And after trying  to add from first element to last
     *
     * @return
     */
    public static int Greedy() {

        /**
         * Create array of Items
         */
        Item[] items = new Item[time.length];

        /**
         * Create objects and fill their fields
         */
        for (int i = 0; i < time.length; i++) {
            items[i] = new Item();
            items[i].cost = cost[i];
            items[i].time = time[i];
            items[i].coefficient = cost[i] / time[i];
        }

        /**
         * Sort it by their coefficient.
         * The biggest the first
         */
        for (int i = 0; i < items.length - 1; i++) {
            for (int j = 0; j < items.length - 1 - i; i++) {
                if (items[j].coefficient < items[j + 1].coefficient) {
                    Item temp = items[j];
                    items[j] = items[j + 1];
                    items[j + 1] = temp;
                }
            }
        }

        /**
         * Trying to find best case
         */
        int resultCost = 0, resultTime = 0;
        for (int i = 0; i < items.length; i++) {
            if (items[i].cost + resultCost <= budget) {
                resultTime += items[i].time;
                resultCost += items[i].cost;
            }
        }

        return resultTime;
    }

    /**
     * In this method we call parser and write result of our other methods
     * to file
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException {
        parser();

        BufferedWriter bw = new BufferedWriter(new FileWriter("output.txt"));

        /**
         * Our result will be equal max of results of two our different type of programming
         */
        int result = Math.max(Greedy(), BruteForce());
        bw.write(String.valueOf(result));

        bw.close();
    }

}
